import java.util.*;

class Solution {
    public int solution(String str1, String str2) {
        int answer = 0;
        HashMap<String, Integer> str1Map = new HashMap<>();
        HashMap<String, Integer> str2Map = new HashMap<>();
        int union = 0;
        int intersection = 0;
        
        str1 = str1.toLowerCase();
        str2 = str2.toLowerCase();
        
        for(int i=0; i<str1.length()-1;i++){
            char first = str1.charAt(i);
            char second = str1.charAt(i+1);
            StringBuilder stb = new StringBuilder();
            if(first>=97 && first<=122 && second>=97 && second<=122){
                String newStr = stb.append(first).append(second).toString();
                int value = str1Map.getOrDefault(newStr, 0);
                str1Map.put(newStr, value+1);
            }
            
        }
        
        for(int i=0; i<str2.length()-1;i++){
            char first = str2.charAt(i);
            char second = str2.charAt(i+1);
            StringBuilder stb = new StringBuilder();
            if(first>=97 && first<=122 && second>=97 && second<=122){
                String newStr = stb.append(first).append(second).toString();
                int value = str2Map.getOrDefault(newStr, 0);
                str2Map.put(newStr, value+1);
            }
        }
        
        // hashmap에 존재하면 intersection에는 min의 값을 union에는 max 값을
        // 이미 카운트한 것들에 대해서는 0으로 변경
        
        for(String key : str1Map.keySet()){
            int value1 = str1Map.get(key);
            int value2 = str2Map.getOrDefault(key, 0);
            
            intersection += Math.min(value1, value2);
            union += Math.max(value1, value2);
            
            if(value2!=0){
                str2Map.put(key, 0);
            }
        }
        
        for(String key : str2Map.keySet()){
            union += str2Map.get(key);
        }
        
        if(intersection==0 && union==0){
            answer = 65536;
        }
        else{
            answer = (int) ((intersection / (double) union) * 65536) ;
        }
        return answer;
    }
}
